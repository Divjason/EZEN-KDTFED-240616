1.변수
2.자료형
3.연산자
4.조건문
5.반복문
6.함수
7.DOM
8.EVENT
9.DOM응용
10.객체
11.Class
12.문자열
13.배열
14.정규식
15.데이터통신
- 서버통신
- 어떤 특정 사이트!!! 이미지 // 텍스트 (*서버)
- 컨테이너 (*자료 저장 보관소)

200 : 데이터통신 성공

4xx : 클라이언트가 정상적이지 않은 요청을 서버에게 했다
> 잘못된 주소
nike.com
> 주소는 맞으나 해당 주소안에 내포되어있는 값이 x

5xx : 클라이언트는 정상적으로 서버에 request를 했으나, 서버측에서 정상적으로 response할 수 없는 상황

// 나는 지금 왜 json 파일을 생성하는가?

// 쇼핑몰 > 상품정보

// 카테고리 // 구매정보 // 이벤트

readyState : 
클라이언트 입장에서 서버로부터 json데이터를 가져오는데 있어서 현재 어떤 상태인지를 확인할 수 있도록 도와주는 정보!!!

0 : 클라이언트 아직 서버에게 그 어떤 요청도 하지 않은 상태!!!

1 : 클라이언트가 서버에게 자료를 요청하고 성공한 상태!!!

2 : 클라이언트가 서버에게 자료를 요청한 후 서버가 해당 요청에 대한 응답 메세지를 전달한 상태

3 : 서버가 클라이언트에게 전달한 자료를 클라이언트가 로딩중인 상태

4 : 서버의 자료 전송 종료 및 클라이언트의 자료 로딩 완료로 인해 이제 클라이언트 측에서 자료를 정상적으로 사용할 수 있는 단계




*클라이언트 (*사용자 // 웹브라우저 => 주소 || 포털사이트 = 키워드 => 특정기업.브랜드 웹페이지) 

*서버 

1) 클라이언트 & 서버통신 : 데이터통신

2) 프로토콜 => https || http

3) 서버 & 클라이언트 => 정상적으로 소통을 하고 있다는 사실을 기록!!!
> request // response Header
> 서버 물리적인 공간 (*java, python, c++) // 웹브라우저 (*html, css, js)

4) JSON : 서버와 클라이언트 모두 인식.식별 가능한 언어!!!
> JavaScript Object Notation : 자바스크립트 객체 표기법
> 객체와 정말 비슷하게 생겼지만, key 입력 시, 반드시 문자열표기!!

5) JSON을 클라이언트 & 서버 편리하고 효율적으로 사용하기 위한 메서드 함수!!!

객체를 json 형식의 파일로 변환시키고자 할 때
JSON.stringify( ) : 객체 안에있는 데이터를 문자형태로 바꿔주는 함수

json을 객체형식의 파일로 변환시키고자 할 때
JSON.parse( ) : json 데이터를 웹브라우저가 parsing할 수 있는 객체형태로 바꿔주는 함수 

6) JSON 데이터가 아무리 좋아도 가져오지 못하면 무쓸모!!!
JSON 데이터를 가져오는 "방식" => AJAX
Asynchronous(비동기적) Javascript(자바스크립트) And XML(html 보다 유연한 문법을 가진 문서)

7) json데이터를 클라이언트 측에서 가져와서 사용할 수 있는 "방법"
XMLHttpRequest( ) => 자바스크립트의 생성자함수 혹은 클래스로 만들어진 프로토타입!!!

8) 외부에서 데이터를 송수신하는 경우, 예외조항 처리!!!
- 예외조항처리가 이루어지지 않았을 경우, 에러가 발생하더라도 에러인지 아닌지 일반 고객들은 인지 할 수 없음 => 하염없이 기다림

- 예외조항처리를 하게되면, 에러사항 VS 로딩사항 구분!!!!
> try
> catch
> finally
> throw





