Page Router 방식
- 폴더명 > 페이지 라우팅
- searchBar 컴포넌트 페이지
- 모든 컴포넌트 페이지 모두 적용!!!
- getLayOut 속성 내가 적용하고자 하는 컴포넌트페이지 별도 설정

- 각각의 페이지 마다 설정하고 싶은 레이아웃을 별도로 만들어서 적용!!!

App Router 방식

- Page Routing 설정방식
> Route Group을 설정

- Layout 설정방식
> 페이지의 부모요소로서 작동 // 특정 Layout을 가지고 있는 폴더는 하위 폴더 내 모든 페이지들에게 Layout 속성을 적용!!!

- Data Fetching 설정방식
> SSR : 사전렌더링을 통해서 클라이언트 측에서 어떤 요청사항이 발생했을 때, 전통적인 SSR방식보다 훨씬 빠르게 응답할 수 있도록해주는 방식

> SSG : 만약 사전렌더링의 과정에서 많은 데이터양을 취급해야하는 상황이 발생한다면, 사전렌더링 자체에 시간소요가 많아지기 때문에 결국 클라이언트에게 빠른 응답을 할 수 없기에 Next.js의 서버에서 Build단계를 거칠 때, 이미 클라이언트측에 전달한 데이터를 정의하는 방식

> ISR : SSG방식으로 데이터를 정의 + 개발자가 정의해놓은 시간.주기에 맞춰서 서버측 데이터를 새롭게 업데이트하는 방식

- 서버 컴포넌트 페이지 : 무조건 서버측에서만 실행되는 페이지
- 클라이언트 컴포넌트 페이지 : 서버에서 사전 렌더링을 하는 단계에서 1회 실행 + 클라이언트 단계에서 Hydration을 하는 순간 1회 실행

> Next.js의 경우, 가급적이면 서버컴포넌트 페이지의 속성을 사용해라 권장 // 부득이한 경우에만 클라이언트 컴포넌트 페이지를 사용해줄 것을 이야기!

*단, 서버컴포넌트 페이지를 사용할 때, 주의사항
1) 서버컴포넌트 안에는 브라우저에서 실행될 코드 x
2) 클라이언트 컴포넌트라고 해서 반드시 꼭 클라이언트 단계에서만 실행되는 것은 아니다!
3) 클라이언트 컴포넌트는 서버컴포넌트를 import x
4) 서버컴포넌트에서 클라이언트 컴포넌트에게 props를 전달할 때직렬화되지 않은 데이터는 전달 x
*직렬화 되어있는 데이터 자료 => 객체와 같이 어떤 구조를 띄고 있는 데이터 // 함수

서버 : 사전렌더링 (*JS 번들데이터를 취합) 컴포넌트 페이지 > 

서버컴포넌트 페이지
클라이언트컴포넌트 페이지

RSC : React Server Component + Payload

네비게이션

