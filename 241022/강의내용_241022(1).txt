https://2023.stateofjs.com/
https://programmers.co.kr/pages/2023-dev-survey#dev-part-4-01

1.TypeScript는 Javascript의 Super-Set 언어

2.앤더스 하일스버그 개발자
- C언어 개발 창시자

3.Javascript 언어 < Java언어 < C언어 (*객체지향)

4.기존 JS언어 문법을 그대로 흡수 & 수용 + @
- Type을 사전에 지정하는 기능 더한 것!!!

5.C언어 & Java : B/E
- 변수 선언 => 값 (사전 변수 타입)
- 변수 = 숫자 // 문자

6.Node.js의 탄생!!!!
- Google Chrome 브라우저 탑재 V8검색엔진
- V8 => Node.js // 브라우저가 아닌 환경에서도 JS를 사용할 수 있음!
- JS => Server
- Strict Mode => TS

7.모든 프로그래밍 언어는 타입 시스템을 가지고 있음
- C, Java : 정적 타입 시스템 (*코드를 실행하기 전에 모든 변수의 타입 고정적으로 선 결정 => 값 할당)

- TS : 점진적 타입 시스템 (*변수안에 값을 넣으면, 자동으로 값을 추론 // 변수의 타입을 바로 고정)

- JS : 동적 타입 시스템 (*코드를 실행하고 나서 해당 변수안에 담긴 값을 유추해서 변수 타입을 결정)

8.웹 브라우저가 인식할 수 있는 언어는 3가지!!!
- HTML // CSS / JS
- SCSS (*Compiler)

9.TS의 컴파일링 작동 프로세스
1) JS (*인간 친화적인 언어) => 브라우저 (*AST 구조) => 바이트 코드 (*실행)

2) TS (*인간 친화적인 언어) => 1차 AST 구조 (*기계 친화적인 언어) => 타입검사 성공 => JS(*컴파일링) => 2차 AST 구조 (*기계 친화적인 언어) => 바이트 코드 (*실행)

수동적으로 세팅
빌드도구 세팅

1.npm init -y
> package.json

2.npm i @types/node
> node 타입 정의
> node_modules

3.npm i tsx -g (*신 버전) : 컴파일러 & 실행도구 설치
-> npm i tsx (*신 버전)
-> tsx -v
-> tsx src/index.ts

4.tsc --init : 타입스크립트 컴파일러 옵션 설정

5.compilerOptions



Module : 복수의 자바스크립트 파일을 각 기능에 따라서 개별적으로 생성해놓고, 상황에 따라서 가져다가 사용하기 위해서 만든 시스템

Node.js => 자체적으로 모듈 시스템 버전 생성.선언  사용 => CommonJS

JS => ESM // import & export

----------------------------

JS => TS 컴파일링 & Node 실행
=> 모듈 x
=> ts

----------------------------

TS 컴파일링 환경설정 세팅!!!!
tsc --init

Node.js 버전
> ts-node 대응 중지!!! // 18버전
> tsx => 컴파일링 => 출력x

useState(null)

[ ]

타입스크립트는 기본적으로 각각의 파일들을 전역요소로 인식!!!

타입스크립트 계층 구조!!!!!

상대적으로 상위랭크되어있는 타입 : 슈퍼타입
상대적으로 하위랭크되어있는 타입 : 서브타입
> 슈퍼타입으로 갈수록 수용할 수 있는 타입의 개수 많아짐
> 서브타입으로 갈수록 수용할 수 있는 타입의 개수 한정적!!!


















