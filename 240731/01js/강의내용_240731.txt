1. 각자의 전문성 살리는 것도 능력!!!
html : 구조

css : 스타일
> transition / transform / animation

js : 동적인 페이지를 구현
> DOM

2."자바스크립트"
> 자바(x) 

3."자바스크립트" 한문장으로 표현
> 객체지향 프로그래밍 "언어"
> 알고리즘 & 자료구조 토대로 무언가를 생성.만들어낼 수 있어야 진정한 언어!!!
> 라이브러리 // 프레임워크  (무진장 많음)
> 요즘 취업 잘 되는 언어?
> 대세 언어?
- react.js / jquery / flutter

4.객체지향
- 객체 : 어떤 정보 및 데이터를 효율적으로 관리하기 위해서 만들어놓은 저장공간
------------------------------------------

*html 문서 : 웹 브라우저

- fetching 단계
> html 문서를 웹브라우저가 전달받아서 본인이 읽을 수 있는 형태로 변환시키는 작업

- parsing 단계
> html 문서를 웹브라우저가 실제 읽어나가는 단계
> 반드시 위에서 아래로 (*먼저 작성한 문서를 먼저읽고, 나중에 작성한 문서를 가장 나중에)
> div * 5 : position: absolute
> script 태그를 만나는 순간!!! => 운명멈춤
> script 태그를 향해 돌진~
> 동적인 페이지를 개발
> 클릭 / 마우스오버
> html 내 특정 태그 => Node

1) body : script!!! => 내부스크립트

2) script태그 속성 : async // defer

async : 비동기 처리
> 동시에서 여러가지의 작업 수행
> 현재 주어진 문제를 해결하면서, 동시에 다른 기타 요소들을 해결할 수 있는 방식

defer : 병렬방식으로 html & script를 읽고, 둘 중에 하나가 먼저 종료되더라도 일단 기다리고, html, script 모두 다 읽게되면 그때 fetching

sync : 동기 처리
> 먼저 실행되고 있는 어떤 문제를 다 처리해야지만, 그다음 문제를 처리 할 수 있는 방식

- executing 단계 : 실제 웹브라우저가 읽어내려온 문서를 웹 브라우저 출력을 실행시키는 단계


1.변수
- 데이터를 담는 바구니!!
- 연산작업 // document 값 // window 값
- 3개의 키워드를 활용해서 변수 선언!!!
> var (*가급적 사용 x)
- 호이스팅 가능!!
- hoisting = 끌어올리다
> let (*차선 고려) : 재선언x & 재할당ㅇ
> const (*최우선 고려) : 재선언 & 재할당x
- 변하지않은 고정값 = 상수값
- 선언 = 생성!!!
- 값을 할당!!!

// 변수명 선언 시, 유의사항
// 변수명으로는 예약어 사용불가!!
// document // window => 찜!!!
// $, _, 영문자 => 변수명 첫단어 가능!!!
// 단, 변수명 중간 혹은 마지막에는 숫자 가능!!
// 변수명은 반드시 대.소문자를 가림!!!

// 3가지 방식 중 1개
// 1) 카멜표기법 : 낙타
// 2) 스네이크표기법 : 뱀
// 3) 헝가리안표기법 : 단어 대문자!!!

// const zzangu = 3;
// const fxxx = 4;
// const $number_sum = 10;

// class선언 => 객체!!!

// const Number = 0;

2.자료형
> 현재 변수안에 할당된 값의 자료형태를 확인할 수 있도록 해주는 함수 => typeof( )
- 숫자형 : 숫자!!! = number
- 문자열 : 문자!!! = string => " " //  ' ' // ` `
> 형변환!!!!
- 논리형 : 참과 거짓 값 => boolean > true || false
- 기타형 : null // undefined
> 템플릿 리터럴 문법
변수안에 담긴 값 + 문자열 섞어서

- 객체 => object : 단일값이 아닌, 복합적인 데이터 자료를 저장.보관

- 배열 : 해당 자료형태안에 있는 모든 자식요소들에게 번호를 매길 수 있음 => 해당 번호에 할당된 값만 찾아올 수도 있고, 그 번호에 특정 값을 교체해서 넣을 수도 있음 => 자식요소들이 각각의 번호를 가지고 있기 때문에, 배열안에 담겨있는 총 자식들의 개수도 파악!!
1 => 0, 2 => 1, 3 => 2
index 값 : 자식요소들의 순서번호 => 반드시 0에서부터 시작!!
length 값 : 해당 배열안에 담겨있는 총 자식의 개수
=> 무조건 해당 배열의 마지막 자식요소 아이템의 index 값은 배열의 전체 총 자녀 개수에서 -1을 한 값과 무조건 동일!!!

- 심벌 : "유일무이한" 값을 생성 및 보관.관리!!!

- 함수 : function // arrow

- Chef's Studio!!!
> 슬라이드!!!
> 자동무한 슬라이드
> 마우스 오버 // 화살표
> 어떤 경우에는 슬라이드 // 패턴
> 문제!!!

컴퓨터는 cpu : 메모리 공간 제어
변수 // 색상 // => 메모리 생성
메모리의 가장 최소단위 : 비트
비트 : 0, 1만 표현
바이트 : 8개의 비트가 모이면 1바이트
자료형 : 문자 // 숫자
숫자 => 무조건 64비트 = 8바이트

변수 500개 선언 => 숫자
> 4000 바이트



1.직접 변수영역에 값을 할당하는 경우, 값이 어느 범위까지 변경될지 아무도 예측불가!!!

자료형
1) 원시 => 타입 : 숫자,문자,논리,심볼,null, un

2) 참조 => 주소값 참조 타입 : 객체, 배열, 함수

=> 전개연산자!!!

stack : 쌓다

자바스크립트 : 싱글스레드 언어!!!

*형변환!!!
> 문자 + 숫자 => 연산, 무조건결과 문자!!!

1) 의도적으로 숫자의 형태로 변환!!!
Number( ) : 숫자가 아닌 값도 숫자로 바꿈!!!
parseInt( ) : 인자값으로 들어온 숫자 정수값으로
parsefloat( ) : 인자값으로 들어온 숫자를 실수값으로 표현 => 소수점을 가지고 있는 숫자!!!

2) 의도적으로 문자의 형태로 변환!!!
String( ) : 모든 값을 싹다 문자열로 바꿈!!!
toString( ) : null, undefined

3) 의도적으로 논리값으로 형태를 변환!!!
Boolean( ) : 모든 값을 논리값으로 바꿈
- 존재하는 값은 거의 대부분 true
- undefined // null / 0

1.변수

2.자료형

3.연산자
+ - / * : 사칙연산
% : 나누기 후 나머지값을 찾아오는 연산자

++ -- : 증감연산자
> 증감연산자를 사용하는 위치에 따라서 결과값이 완전히 달라진다!!!
> 증감연산자가 피연산자 앞에 입력되면, 연산작업을 먼저실행!!!
> 증감연산자가 피연산자 뒤에 입력되면, 연산작업을 나중에!!!

복합대입연산자 => 할당연산자
y = y + x => y += x

비교연산자
- 느슨한 연산자 ==
- 엄격한 연산자 ===
- 부정연산자 => !==

논리연산자 (*참 VS 거짓!!)
- && : and연산자
> 좌항 & 우항 모두 참이어야 최종결과값 true
> 40대 남성

- || : or연산자
> 좌항 & 우항 둘 중에 하나만 참이어도 true
> 40대 혹은 남성

4.조건문
> A일 때, 무언가!!! 그런데, 그게 아니면 무언가!!
> if 문 (*단독으로 여러번 사용가능!!!)
> if else 문 (*반드시 조건식 true 여야지만 실행!!!! // 그렇지 않은경우 else문)
> else if 문 (*복수의 조건식을 따지고자 할 때!)
> 삼항조건연산자
> switch문
- 선택할 수 있는 조건들이 다양한 경우!!
- switch( ) / case / break / default

> 프로그래밍 언어
실행문 (*C언어) // 표현식문 => 다중패러다임언어!!
결과값 실행 => 메모리 공간 

> 함수
선언형 // 명령형

> 프로그래밍 코드 작성 // 실행
객체지향 // 절차지향

*JS 진영 2가지 모듈!!!
> 모듈 : 레고 "블럭"
> Common JS 모듈 : Node
> ESM 모듈 : 공식모듈
> 결국 개발영역 소비자 소비 트랜드
> 소비자 => 문화 // 와치
> 모바일 디바이스
> 눈에 보이는 화려함 (*시각적 // 동적인)
> 100줄 // 200 ~ 300 => 에러 // 오류
> 스크립트 // 기능 분할 작업

5.반복문 (*잘 사용하는자가 중간 레벨급에서는 King)
> 배열 특화!!!
- 기본 for문
- forEach문
- for ...of문

> 객체 특화!!!
- for ...in문

- while문 : 조건식 참이면 반복
- do...while문 : ~을 하다!!!

- break문 :
강제종료의 의미를 가지고 있음

- continue문 :
건너뛰기의 의미를 가지고 있음

> iterable한 자료형만 사용할 수 있음!!!
> 반복시킬 수 있는 자료형
> iterable한 속성 > iterator 객체 만의 전유물
> 객체, 배열
> Set( ) 
> css : 애니메이션 : 반복할 수 있는 iteration

Callback 함수 => 기능적인 의미를 내포하고 있는 명칭
: 야간 Call Taxi

Function (*일반함수)

Arrow Function (*화살표함수) => 하드웨어적인 의미를 내포하고 있는 명칭

*CS 기본개념
1) Variable
2) Scope = 범위
> Global // 1번만 작성해놓으면 언제, 어디서든 가져다가 사용가능!

> Local // 특정 범위 안에서 설정, 그 범위 안에서만 사용가능!

> Block // 특정 제어문의 조건식 안에서 설정된 변수들은 Block 범위에서만 움직임!

> Script // 전역변수처럼 행동!!! => let, const

> 디버깅!!!

함수
> 클로져!!
> this

객체

배열

문자열

정규표현식

Class

API

Canvas




