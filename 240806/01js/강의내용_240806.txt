1.변수
- 원시타입 // 참조타입 : 원본 & 사본
- 전개연산자 (*참조타입 객체 데이터를 원본데이터에서 독립)
- var let const : 재선언 & 재할당

2.자료형
- 숫자형 // 문자열 // 논리형 // undefined // null // 객체 // 배열 // Symbol // 함수
- 형변환 
> Number( ) // parseInt( ) // parseFloat( )
> String( ) // toString( )
> Boolean( )

3.연산자
- 사칙연산자
- 비교연산자 : 느슨한비교 VS 엄격한비교
- 논리연산자
- 할당연산자 (*복합대입연산자)
- 증감연산자 (*사용위치 => 증감 VS 연산)

4.제어문
- 조건문
> if // else // else if
> 실행문 & 표현식문 (*실행하고자하는 문장 { } 표기생략)
> switch : break

- 반복문
> for // for of // for in // forEach
> while // do while (*break // continue)

5.함수 (*프로그래밍의 꽃)
- 선언 VS 호출
- 인수 혹은 인자값 & 매개변수
- 기본매개변수 적용하는 방법
- 인수 개수 & 매개변수의 개수가 상이 => 전개연산자구문
- 기명함수 (*함수이름을 사용해서 함수정의)
- 익명함수 (*변수를 선언 => 함수 할당)
- 화살표함수 (*2015년 이후 업데이트 문법)
- this 객체가 가르키는 것이 상이하다
- return 문
- JS함수 1급시민
> 변수에 할당
> 다른 함수의 인자 혹은 매개변수에 함수를 사용
> 함수의 반환값으로 함수 적용
> 콜백함수 (*함수 안에 또다른 함수를 사용 => 내부에 사용된 함수의 호출 타이밍을 바깥에 있는 함수가 제어할 수 있도록 하는 것)
> 콜백지옥 => Promise // then & catch
> 윈도우 시간 내장 함수
: setInterval // setTimeout // clearInterval

6.DOM
- BOM & DOM
- 브라우저 객체모델 // 문서 객체모델
- form 태그 안에 있는 내부 input 태그 혹은 Node 개념
- querySelector // querySelectorAll
- getElementById // getElementByClassName // getElementByTag
- innerHTML // innerText // textcontent
- addEventListner
- classList
- add( ) // remove( ) // toggle( )

7.Event
- 사용자가 어떤 동적인 행위를 실행함으로 인해서 어떤 특정한 결과가 도출되도록 하는 것!!!
- 버튼 클릭 => 회원가입 // 새로운 정보
- 목록 마우스를 올린다 => 목록의 하위 메뉴 정보를 확인
- 마우스 휠을 이동 => 브라우저 화면 줌인 // 줌아웃

이벤트 종류!!!

window 객체 주로 사용되는 이벤트
- load : html에서 작성된 문서가 정상적으로 로드가 된다면 실행!!!
- resize : 문서 화면의 크기가 바뀐다면 이벤트 실행
- scroll : 문서 내 스크롤이 이동!!!

mouse 이벤트
- click : 마우스 좌측 버튼을 눌렀다가 떼어야지만
- dbclick : 마우스 좌측 버튼을 연타로 클릭하는 경우
- mousedown : 마우스 좌측 버튼을 그냥 누르고 있는 상태
- mousemove : 마우스 버튼이 눌려진 상태에서 이동
- mouseup : 마우스 좌측 버튼을 떼는 경우 

*이벤트 버블링 : 웹 문서에서 이벤트가 발생되었을 때, 기본적으로 이벤트가 발생된 지점의 부모요소로 이벤트가 전파되는 속성!!

*이벤트 캡처링 : 이벤트 버블링과 반대로 이벤트 최고 부모요소에서 자식요소로 거꾸로 내려오는 속성!

(*이벤트 버블링 적용 => 마케팅 요소 // 코드 효율)
- mouseover : 특정요소에 마우스를 올렸을 때
- mouseout : 특정요소에서 마우스가 나왔을 때

(*이벤트 버블링 적용 x => 특정 요소에만 이벤트)
- mouseenter : 특정요소에 마우스를 올렸을 때
- mouseleave : 특정요소에서 마우스가 나왔을 때

keyboard 이벤트
- keydown : 키가 눌러져있는 동안 발생하는 이벤트
- keyup : 키가 손에서 떼어졌을 때
- keypress : 지금은 사용되지 않은 이벤트 // 키보드의 키를 눌렀을 때 발생하는 이벤트

form 이벤트
- change (*select, option, radio) : 다수의 복수 선택지 가운데 특정 하나의 값을 선택하는 경우
- submit (*input) : input속성값이 submit인 경우, form요소의 이벤트 핸들러로 submit 사용가능!!!
- click : 버튼 등의 아이템을 클릭했을 때
- blur : focus와 반대로 커서가 해제되었을 때 발생되는 이벤트
- focus : input태그 중에서 텍스트 값이 입력되어야 하는 상황에서 커서가 클릭되었을 때 이벤트를 실행

> 이벤트를 적용하는 방법!!!!

1) 인라인 스크립트를 활용한 이벤트 적용방법
- 100% 인라인 스크립트 정말 가끔씩 사용
- 외부스크립트와 연동!!!
- 이벤트핸들러

2) 이벤트 핸들러를 활용한 이벤트 적용방법
- 외부스크립트 내 이벤트 핸들러
- on전치사 붙은 핸들러 이벤트!!!

3) addEventListner를 활용한 이벤트 적용방법 (*)
- ES6문법 가장 나중에 선보이게된 문법

=> 모달창 // 슬라이드

*모달페이지가 나타나기전 UI 작업
**모달페이지 자체에 대한 UI 작업
***모달페이지가 나타나기 전 상황에서 가상클래스를 적용 => script 제어

*이벤트가 실행 => 메모리 공간 => 이벤트 객체!!

- target : 실제 이벤트가 발생된 지점
(*웹브라우저 켜지는 순간 = 마운트 // html 문서 parsing)

- currentTarget : 현재 이벤트 핸들러가 부착된 지점
(*비동기적으로 작동 => 콘솔창이 출력되는 그 순간 = currentTarget)

- clientX : 사용자가 바라보고 있는 매체=브라운저 화면의 전체너비 가운데 x좌표값
- clientY : 사용자가 바라보고 있는 매체=브라운저 화면의 전체너비 가운데 y좌표값
> 내부에 있는 문서의 너비 혹은 높이와는 전혀 무관 // 영향!!!

- offsetX : 현재 이벤트가 발생된 해당영역을 기준으로 얼만큼 x축으로 떨어져있는지에 대한 값
- offsetY : 현재 이벤트가 발생된 해당영역을 기준으로 얼만큼 y축으로 떨어져있는지에 대한 값
> 이벤트가 발생된 영역 안에서 값을 서칭

- pageX : 문서=html 문서상에서의 전체너비 가운데 x좌표값
- pageY : 문서상에서의 전체너비 가운데 y좌표값
> 스크롤까지 포함한 좌표값을 찾아온다

- screenX : 현재 사용자가 사용중인 모니터 화면을 기준으로 x좌표값
- screenY : 현재 사용자가 사용중인 모니터 화면을 기준으로 y좌표값

슬라이드는 최초에 브라우저 마운트가 되었을 때, 0번째 슬라이드부터 시작!!!

이벤트 버블링 // 캡처링
- 버블 : 비누거품 (위)
- 문서상에서 어떤 이벤트 실행 => 이벤트가 위쪽으로 전파

어떤 특정 요소에서 이벤트를 실행 => 가장 위쪽 부모로부터 가장 밑에있는 요소까지 순차적으로 실행 => 캡처링!!!

인재 // 천재!!!
홍대 서울 IT
"누구나 처음은 있다"

