*Editor 컴포넌트 생성 => 공통컴포넌트
- New 컴포넌트 페이지 (*신규)
- Edit 컴포넌트 페이지 (*기존)
> 동일한 양식을 사용해서 일기 작성 || 업데이트

*그래서 UI 기획 매우 중요!!!
> 컴포넌트 기반 작업 
> 최초에 기획단계에서 설정해놓지 않은 컴포넌트 페이지 만약, 중간 삽입 // 수정

*커스텀 Hooks 왜 만드는가?
> React.js > 내장 Hooks > 함수!!!!
> 자주 반복해서 사용해야하는 기능 존재 (*템플릿화)
> 컴포넌트 // 유틸리티 자바스크립트 함수
> 독립적인 모듈로서 어떤 기능을 담당시키고자 할 때
> 일반 자바스크립트 함수 > React Hooksx

*오늘부터 점심 마지막 // 2분
> 한달여 전, JS // html, css
> Publisher // FE // React.js
> 추체 JS // 잡코리아 // 

*컴포넌트 렌더링
1) 부모컴포넌트가 렌더링
2) Props 상태 업데이트 // 추가
3) state 업데이트

useMemo // React.memo( ) // useCallback( ) // 함수형 업데이트 => CB

1.로컬스토리지 데이터 반영구 저장
2.배포하는 방법

html, css, js 배포

1.firebase 설치

2.firebase 초기화

3.public 폴더 > 호스팅 데이터 복.붙

4.firebase deploy

> 웹브라우저가 인식x
> react 세팅 > 로컬컴퓨터 서버 활용
> 어떤 로컬컴퓨터든지 해당 파일을 볼 수 있도록 설정
> 웹브라우저 : html, css, js만 인식!!!

> npm run start : 리액트 서버를 켜는 명령어
> npm run build : 리액트 파일을 배포직전 설정단계 명령어






1.Page Routing
2.Styled Components
3.React Hooks
4.Custom Hooks
5.Memoization
>
Backend 부분
DB 개념 이해 // DataBase > Data
각종 다양한 형식의 데이터가 보관
유튜브 : 유튜브 서버 (*업로드 수많은 영상 + 댓글 + 회원계정 + 조회수 + 좋아요수 기타 등등)

관계형 DB : 유튜브 A아이디 + 2024년 업로드 영상 + 시청 + 댓글
> 유튜브 1개월 계정정지 
> 학습량 & 난이도 높은편 // 서버운영 부담 
> MySQL

비관계형 DB : 상대적으로 다루기 쉬움 // 서버운영 부담 덜 // 복잡한 구조의 웹앱페이지 제작 x
> 글로벌 기업 비관계형 DB 클라우드 서비스 시행
> firebase : 그래도 AWS 보다는 보다 쉽게 접근
- 배포x

고차원 구조(Scheme) 설계 및 세팅

다양하고 많은 멀티미디어 컨텐츠 다룰 수 있어야 함
img // video 용량 부담 && Server 부재
사용자가 멀티미디어 컨텐츠를 업로드 // 삭제!!!
> 본인 업로드한 컨텐츠, 본인 삭제 권한

TS + React.js
JS + React.js : 터미널 npx create-react-app .

TS : JS "Super Set" 언어
> 보다 효율적인 방법 : Vite
https://vitejs.dev/

CSS // SCSS => Compiling (번역)

1.바탕화면 > kdtfed > 240923 폴더 생성

2.240923 폴더
npm create vite@latest
1) 프로젝트 이름 : sns-flatform
2) 프레임 워크 : react
3) 컴파일러 선택 : typescript + swc

3.sns-flatform 폴더
npm run dev : 서버 On

4.루트폴더 & git 연동

5.라이브러리
npm install react-router-dom@6.14.2
npm install styled-components@6.0.7
npm install @types/styled-components -D

Typescript는 자바스크립트 내부에서 사용할 수 있는 모든 자료형의 타입을 지정!!!



